[comment encoding = UTF-8 /]
[module toJava('http://www.n7.fr/GAME')]


[template public toJava(aGame : Game)]
[comment @main/]
[file (aGame.name+ '.java', false, 'UTF-8')]
package Test;

import Model.*;
import Affichage.*;
import Controle.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class [aGame.name/] {
	/**
	  * AUTOGENERATED CLASS
	  * Do not modify the code
	  * Please use toJava.mtl inside an Acceleo Project
	  */
	public static void main(String['[]'/] args) {
		/**
		 * Init all elements
		 */
		
		/**
		 * Fill all elements
		 */

		// Creation du game.
		Game [aGame.name/] = new Game("[aGame.name/]");

		// Creation des places et affectation de leurs types.
		[for (place : Place | aGame.getPlaces().places)]
		PlacementType [place.name/]_type = PlacementType.between;
		[if (place.name = aGame.start.name)]
		[place.name/]_type = PlacementType.start;
		[/if]
		[for (finish : Place | aGame.finish)]
		[if (place.name = finish.name)]
		[place.name/]_type = PlacementType.finish;
		[/if]
		[/for]
		Place [place.name/] = new Place("[place.name/]", [place.name/]_type);
		[/for]

		// Creation des Items.
		[for (item : Item | aGame.getItems().items)]
		Item [item.name/] = new Item("[item.name/]", [item.size/]);
		[/for]
		
		// Creation des Knowledges
		[for (knowledge : Knowledge | aGame.getKnowledges().knowledges)]
		Knowledge [knowledge.name/] = new Knowledge("[knowledge.name/]", new Condition(""));
		[/for]

		// Creation du Player
		Player [aGame.getPlayer().name/] = new Player("[aGame.getPlayer().name/]", [aGame.start.name/]);

		
		
		[for (place : Place | aGame.getPlaces().places)]
		[for (png : Png | place.png)]
		List<Interaction> [png.name/]_interactions = new ArrayList<Interaction>();
		[for (interaction : Interaction | png.interactions)]
		List<Choice> [interaction.name/]_choices = new ArrayList<Choice>();
		[for (choice : Choice | interaction.choices)] 
		[for (action : Action | choice.actions)]
		[for (exchange : Exchange | action.exchanges)]
		Exchange [exchange.name/] = new Exchange();
		HashMap<Knowledge, Integer> gainknowledges_[exchange.name/] = new HashMap<Knowledge, Integer>();
		HashMap<Item, Integer> gainitems_[exchange.name/] = new HashMap<Item, Integer>();
		HashMap<Item, Integer> consumitems_[exchange.name/] = new HashMap<Item, Integer>();
		[for (item : UnityItem | exchange.GainedItems)]
		gainitems_[exchange.name/].put([item.unity.name/], [item.Occurence/]);
		[/for]
		[for (item : UnityItem | exchange.ConsumedItems)]
		consumitems_[exchange.name/].put([item.unity.name/], [item.Occurence/]);
		[/for]
		[for (knowledge : UnityKnowledge | exchange.GainedKnowledges)]
		gainknowledges_[exchange.name/].put([knowledge.unity.name/], [knowledge.Occurence/]);
		[/for]
		[exchange.name/].setGainedKnowledge(gainknowledges_[exchange.name/]);
		[exchange.name/].setConsumedItems(consumitems_[exchange.name/]);
		[exchange.name/].setGainedItems(gainitems_[exchange.name/]);
		Action [action.name/] = new Action("[action.name/]", [exchange.name/]);
		[/for]
		Choice [choice.name/] = new Choice("[choice.name/]", PlacementType.start, [action.name/]);
		[/for]
		[choice.name/].setDescription("[choice.name/]");
		[interaction.name/]_choices.add([choice.name/]);
		[/for]
		Interaction [interaction.name/] = new Interaction("[interaction.name/]", new Condition(""), [interaction.name/]_choices);
		[png.name/]_interactions.add([interaction.name/]);
		[/for]
		Png [png.name/] = new Png("[png.name/]", [place.name/], [png.name/]_interactions);
		[/for]
		[/for]

		// Creation des arcs
		[for (arc : Arc | aGame.getArcs().arcs)]
		Arc [arc.name/] = new Arc("[arc.name/]", Visibility.invisible, [arc.origin.name/], [arc.target.name/]);

		[for (condition : Condition | arc.VisibilityConditions)]
		Condition [condition.name/] = new Condition("[condition.name/]");
		HashMap<Knowledge, Integer> [condition.name/]_knowledgesRequired = new HashMap<Knowledge, Integer>();
		HashMap<Item, Integer> [condition.name/]_itemsRequired = new HashMap<Item, Integer>();
		[for (item : UnityItem | condition.itemsRequired)]
		[condition.name/]_itemsRequired.put([item.unity.name/], [item.Occurence/]);
		[/for]
		[for (knowledge : UnityKnowledge | condition.knowledgesRequired)]
		[condition.name/]_knowledgesRequired.put([knowledge.unity.name/], [knowledge.Occurence/]);
		[/for]
		[condition.name/].setRequiredKnowledges([condition.name/]_knowledgesRequired);
		[condition.name/].setRequiredItems([condition.name/]_itemsRequired);
		[arc.name/].setVisibilityCondition([condition.name/]);
		[/for]
		[for (exchange : Exchange | arc.exchanges)]
		Exchange [arc.name/]_exchange = new Exchange("[arc.name/]_exchange");
		HashMap<Knowledge, Integer> [arc.name/]_knowledgesGained = new HashMap<Knowledge, Integer>();
		HashMap<Item, Integer> [arc.name/]_itemsConsumed = new HashMap<Item, Integer>();
		HashMap<Item, Integer> [arc.name/]_itemsGained = new HashMap<Item, Integer>();
		[for (item : UnityItem | exchange.GainedItems)]
		[arc.name/]_itemsGained.put([item.unity.name/], [item.Occurence/]);
		[/for]
		[for (knowledge : UnityKnowledge | exchange.GainedKnowledges)]
		[arc.name/]_knowledgesGained.put([knowledge.unity.name/], [knowledge.Occurence/]);
		[/for]
		[for (item : UnityItem | exchange.ConsumedItems)]
		[arc.name/]_itemsConsumed.put([item.unity.name/], [item.Occurence/]);
		[/for]
		[exchange.name/].setGainedItems([arc.name/]_itemsGained);
		[exchange.name/].setGainedKnowledge[arc.name/]_knowledgesGained);
		[exchange.name/].setConsumedItems([arc.name/]_itemsConsumed);
		[arc.name/].setExchange([exchange.name/]);
		[/for]
		
		[/for]


		[for (item : Item | aGame.getItems().items)]
		[item.name/].setVisibility(Visibility.visible);
		[/for]
		[aGame.getPlayer().name/].setInventorySize([aGame.getPlayer().sizeMax/]);
		[for (item : UnityItem | aGame.getPlayer().unityitem)]
		[aGame.getPlayer().name/].addItem([item.unity.name/],[item.Occurence/]);
		[/for]
		

		[for (p : Place | aGame.getPlaces().places)]
		[for (png : Png | p.png)]
		[png.name/].setVisibility(Visibility.visible);
		[/for]
		List<Arc> [p.name/]_arcin = new ArrayList<Arc>();
		[for (arcin : Arc | p.arc_in)]
		[p.name/]_arcin.add([arcin.name/]);
		[/for]
		List<Arc> [p.name/]_arcout = new ArrayList<Arc>();
		[for (arcout : Arc | p.arc_out)]
		[p.name/]_arcout.add([arcout.name/]);
		[/for]
		[p.name/].setArcsIn([p.name/]_arcin);
		[p.name/].setArcsOut([p.name/]_arcout);
		[/for]

		[for (p : Place | aGame.getPlaces().places)]
		List<Png> [p.name/]_pngs = new ArrayList<Png>();
		[for (png : Png | p.png)]
		[p.name/]_pngs.add([png.name/]);
		[/for]
		[p.name/].setPng([p.name/]_pngs);
		[/for]
		
		[aGame.name/].setPlayer([aGame.getPlayer().name/]);

		List<Place> places = new ArrayList<Place>();
		[for (p : Place | aGame.getPlaces().places)]
		places.add([p.name/]);
		[/for]
		places.add([aGame.start.name/]);
		[aGame.name/].setPlaces(places);
		[aGame.name/].setStartPlace([aGame.start.name/]);
		/**
		 * Launch the game
		 */
		Controleur controleur = new Controleur(new Afficheur(), [aGame.name/]);
		controleur.jouer();
	}
}
[/file]
[/template]


[query public getItems(game : Game) : Items = 
	game.gameElements ->select( e | e.oclIsTypeOf(Items) )
		->collect( e | e.oclAsType(Items))
		->asOrderedSet()
		->first()
/]
[query public getPlaces(game : Game) : Places = 
	game.gameElements ->select( e | e.oclIsKindOf(Places) )
		->collect(e | e.oclAsType(Places))
		->asOrderedSet()
		->first()
	
/]
[query public getKnowledges(game : Game) : Knowledges = 
	game.gameElements ->select( e | e.oclIsTypeOf(Knowledges) )
		->collect( e | e.oclAsType(Knowledges))
		->asOrderedSet()
		->first()
/]
[query public getPngs(game : Game) : Pngs = 
	game.gameElements ->select( e | e.oclIsTypeOf(Pngs) )
		->collect( e | e.oclAsType(Pngs))
		->asOrderedSet()
		->first()
/]
[query public getArcs(game : Game) : Arcs = 
	game.gameElements ->select( e | e.oclIsTypeOf(Arcs) )
		->collect( e | e.oclAsType(Arcs))
		->asOrderedSet()
		->first()
/]
[query public getPlayer(game : Game) : Player = 
	game.gameElements ->select( e | e.oclIsTypeOf(Player) )
		->collect( e | e.oclAsType(Player))
		->asOrderedSet()
		->first()
/]