package Test;

import Model.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import Affichage.*;
import Controle.*;

public class Guess {

	/**
	  * AUTOGENERATED CLASS
	  * Do not modify the code
	  * Please use toJava.mtl inside an Acceleo Project
	  */

	public static void main(String[] args) {
		/**
		 * Init all elements
		 */
		// Init Game
		Game Guess = new Game("Guess");
		// Init Composants
		Place guess1 = new Place("Guess1", PlacementType.start);
		Place guess2 = new Place("Guess2", PlacementType.between);
		Place guess3 = new Place("Guess3", PlacementType.between);
		Place guess4 = new Place("Guess4", PlacementType.finish);
		Place fail = new Place("Fail", PlacementType.finish);
			
		Item tentative = new Item("Tentative", 1);
				
		Knowledge reussite = new Knowledge("Reussite", new Condition(""));
		
		Player joueur = new Player("Joueur", guess1);
		
		Exchange GainReussite = new Exchange();
		HashMap<Knowledge, Integer> gainknowledge = new HashMap<Knowledge, Integer>();
		gainknowledge.put(reussite, 1);
		GainReussite.setGainedKnowledge(gainknowledge);

		Exchange PerteTentative = new Exchange();
		HashMap<Item, Integer> consumitem = new HashMap<Item, Integer>();
		consumitem.put(tentative, 1);
		PerteTentative.setConsumedItems(consumitem);
		
		Action bonneReponse1 = new Action("BonneReponse", GainReussite);
		Action mauvaiseReponse1 = new Action("BonneReponse", PerteTentative);
		
		
		Choice Reponse11 = new Choice("Question", PlacementType.start, bonneReponse1);
		Reponse11.setDescription("1");
		Choice Reponse12 = new Choice("Question", PlacementType.start, mauvaiseReponse1);
		Reponse12.setDescription("3");
		Choice Reponse13 = new Choice("Question", PlacementType.start, mauvaiseReponse1);
		Reponse13.setDescription("7");
		Choice Reponse14 = new Choice("Question", PlacementType.start, mauvaiseReponse1);
		Reponse14.setDescription("10");
		Choice Reponse15 = new Choice("Question", PlacementType.start, mauvaiseReponse1);
		Reponse15.setDescription("12");
		Choice Reponse16 = new Choice("Question", PlacementType.start, mauvaiseReponse1);
		Reponse16.setDescription("13");
		Choice Reponse17 = new Choice("Question", PlacementType.start, mauvaiseReponse1);
		Reponse17.setDescription("117");
		
		
		
		Choice Reponse21 = new Choice("Question", PlacementType.start, mauvaiseReponse1);
		Reponse21.setDescription("1");
		Choice Reponse22 = new Choice("Question", PlacementType.start, mauvaiseReponse1);
		Reponse22.setDescription("3");
		Choice Reponse23 = new Choice("Question", PlacementType.start, mauvaiseReponse1);
		Reponse23.setDescription("7");
		Choice Reponse24 = new Choice("Question", PlacementType.start, mauvaiseReponse1);
		Reponse24.setDescription("10");
		Choice Reponse25 = new Choice("Question", PlacementType.start, bonneReponse1);
		Reponse25.setDescription("12");
		Choice Reponse26 = new Choice("Question", PlacementType.start, mauvaiseReponse1);
		Reponse26.setDescription("13");
		Choice Reponse27 = new Choice("Question", PlacementType.start, mauvaiseReponse1);
		Reponse27.setDescription("117");
		
		
		Choice Reponse31 = new Choice("Question", PlacementType.start, mauvaiseReponse1);
		Reponse31.setDescription("1");
		Choice Reponse32 = new Choice("Question", PlacementType.start, mauvaiseReponse1);
		Reponse32.setDescription("3");
		Choice Reponse33 = new Choice("Question", PlacementType.start, mauvaiseReponse1);
		Reponse33.setDescription("7");
		Choice Reponse34 = new Choice("Question", PlacementType.start, mauvaiseReponse1);
		Reponse34.setDescription("10");
		Choice Reponse35 = new Choice("Question", PlacementType.start, mauvaiseReponse1);
		Reponse35.setDescription("12");
		Choice Reponse36 = new Choice("Question", PlacementType.start, mauvaiseReponse1);
		Reponse36.setDescription("13");
		Choice Reponse37 = new Choice("Question", PlacementType.start, bonneReponse1);
		Reponse37.setDescription("117");
		
		
		Choice Reponse41 = new Choice("Question", PlacementType.start, mauvaiseReponse1);
		Reponse41.setDescription("1");
		Choice Reponse42 = new Choice("Question", PlacementType.start, mauvaiseReponse1);
		Reponse42.setDescription("3");
		Choice Reponse43 = new Choice("Question", PlacementType.start, bonneReponse1);
		Reponse43.setDescription("7");
		Choice Reponse44 = new Choice("Question", PlacementType.start, mauvaiseReponse1);
		Reponse44.setDescription("10");
		Choice Reponse45 = new Choice("Question", PlacementType.start, mauvaiseReponse1);
		Reponse45.setDescription("12");
		Choice Reponse46 = new Choice("Question", PlacementType.start, mauvaiseReponse1);
		Reponse46.setDescription("13");
		Choice Reponse47 = new Choice("Question", PlacementType.start, mauvaiseReponse1);
		Reponse47.setDescription("117");
		
		
		
		List<Choice> questions1 = new ArrayList<Choice>();
		questions1.add(Reponse11);
		questions1.add(Reponse12);
		questions1.add(Reponse13);
		questions1.add(Reponse14);
		questions1.add(Reponse15);
		questions1.add(Reponse16);
		questions1.add(Reponse17);
		
		Interaction Reponses1 = new Interaction("Reponses1", new Condition(""), questions1);
		List<Interaction> Reponse1 = new ArrayList<Interaction>();
		Reponse1.add(Reponses1);
		
		List<Choice> questions2 = new ArrayList<Choice>();
		questions2.add(Reponse21);
		questions2.add(Reponse22);
		questions2.add(Reponse23);
		questions2.add(Reponse24);
		questions2.add(Reponse25);
		questions2.add(Reponse26);
		questions2.add(Reponse27);
		
		Interaction Reponses2 = new Interaction("Reponses2", new Condition(""), questions2);
		List<Interaction> Reponse2 = new ArrayList<Interaction>();
		Reponse2.add(Reponses2);
		
		List<Choice> questions3 = new ArrayList<Choice>();
		questions3.add(Reponse31);
		questions3.add(Reponse32);
		questions3.add(Reponse33);
		questions3.add(Reponse34);
		questions3.add(Reponse35);
		questions3.add(Reponse36);
		questions3.add(Reponse37);
		
		Interaction Reponses3 = new Interaction("Reponses3", new Condition(""), questions3);
		List<Interaction> Reponse3 = new ArrayList<Interaction>();
		Reponse3.add(Reponses3);
		
		List<Choice> questions4 = new ArrayList<Choice>();
		questions4.add(Reponse41);
		questions4.add(Reponse42);
		questions4.add(Reponse43);
		questions4.add(Reponse44);
		questions4.add(Reponse45);
		questions4.add(Reponse46);
		questions4.add(Reponse47);
		
		Interaction Reponses4 = new Interaction("Reponses4", new Condition(""), questions4);
		List<Interaction> Reponse4 = new ArrayList<Interaction>();
		Reponse4.add(Reponses4);
		
		Png sphinx1 = new Png("Sphinx1", guess1, Reponse1);
		Png sphinx2 = new Png("Sphinx2", guess2, Reponse2);
		Png sphinx3 = new Png("Sphinx3", guess3, Reponse3);
		Png sphinx4 = new Png("Sphinx4", guess4, Reponse4);
		
		Condition CondVisibleSucces = new Condition("ConditionToSucces");
		HashMap<Knowledge, Integer> condknows = new HashMap<Knowledge, Integer>();
		condknows.put(reussite,1);
		CondVisibleSucces.setRequiredKnowledges(condknows);
		
		Arc guess1TOguess2 = new Arc("guess1TOguess2", Visibility.invisible, CondVisibleSucces, guess1, guess2, new Exchange());
		
		Arc guess2TOguess3 = new Arc("guess1TOguess2", Visibility.invisible, CondVisibleSucces, guess2, guess3, new Exchange());
		
		Arc guess3TOguess4 = new Arc("guess3TOguess4", Visibility.invisible, CondVisibleSucces, guess3, guess4, new Exchange());
		
		Condition CondVisibleEchec = new Condition("ConditionToSucces");
		HashMap<Item, Integer> conditem = new HashMap<Item, Integer>();
		conditem.put(tentative,0); /////Problème : comment dire que tentative = 0
		CondVisibleEchec.setRequiredItems(conditem);
		
		Arc guess1TOfail = new Arc("guess1TOfail", Visibility.invisible, CondVisibleEchec, guess1, fail, new Exchange());
		
		Arc guess2TOfail = new Arc("guess2TOfail", Visibility.invisible, CondVisibleEchec, guess2, fail, new Exchange());
		
		Arc guess3TOfail = new Arc("guess3TOfail", Visibility.invisible, CondVisibleEchec, guess3, fail, new Exchange());

		// Init Dependencies
		// Init Items		
		
		//Set ..
		tentative.setVisibility(Visibility.visible);
		joueur.setInventorySize(3);
		joueur.addItem(tentative, 3);
		
		sphinx1.setVisibility(Visibility.visible);
		sphinx2.setVisibility(Visibility.visible);
		sphinx3.setVisibility(Visibility.visible);
		sphinx4.setVisibility(Visibility.visible);
		
		List<Arc> guess1_arc_out = new ArrayList<Arc>();
		guess1_arc_out.add(guess1TOguess2);
		guess1_arc_out.add(guess1TOfail);
		guess1.setArcsOut(guess1_arc_out);
		
		List<Arc> guess2_arc_out = new ArrayList<Arc>();
		guess2_arc_out.add(guess2TOguess3);
		guess2_arc_out.add(guess2TOfail);
		guess2.setArcsOut(guess2_arc_out);
		
		List<Arc> guess3_arc_out = new ArrayList<Arc>();
		guess3_arc_out.add(guess3TOguess4);
		guess3_arc_out.add(guess3TOfail);
		guess3.setArcsOut(guess3_arc_out);
		
		List<Arc> guess2_arc_in = new ArrayList<Arc>();
		guess2_arc_in.add(guess1TOguess2);
		guess2.setArcsIn(guess2_arc_in);
		
		List<Arc> guess3_arc_in = new ArrayList<Arc>();
		guess3_arc_in.add(guess2TOguess3);
		guess3.setArcsIn(guess3_arc_in);
		
		List<Arc> guess4_arc_in = new ArrayList<Arc>();
		guess4_arc_in.add(guess3TOguess4);
		guess4.setArcsIn(guess4_arc_in);
		
		List<Arc> echec_arc_in = new ArrayList<Arc>();
		echec_arc_in.add(guess1TOfail);
		echec_arc_in.add(guess2TOfail);
		echec_arc_in.add(guess3TOfail);
		fail.setArcsIn(echec_arc_in);
		
		List<Png> png1 = new ArrayList<Png>();
		png1.add(sphinx1);
		guess1.setPng(png1);
		List<Png> png2 = new ArrayList<Png>();
		png2.add(sphinx2);
		guess2.setPng(png2);
		List<Png> png3 = new ArrayList<Png>();
		png3.add(sphinx3);
		guess3.setPng(png3);
		List<Png> png4 = new ArrayList<Png>();
		png4.add(sphinx4);
		guess4.setPng(png4);
		
		Guess.setPlayer(joueur);
		Guess.setStartPlace(guess1);
		joueur.setInventorySize(10);
		joueur.addItem(tentative, 10);
		
		List<Place> places = new ArrayList<Place>();
		places.add(guess1);
		places.add(guess2);
		places.add(guess3);
		places.add(guess4);
		Guess.setPlaces(places);
		
		/**
		 * Launch the game
		 */
		Controleur controleur = new Controleur(new Afficheur(), Guess);
		controleur.jouer();
	}

}
