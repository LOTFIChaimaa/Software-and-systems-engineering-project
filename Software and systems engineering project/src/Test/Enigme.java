package Test;

import Model.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import Affichage.*;
import Controle.*;

public class Enigme {

	/**
	  * AUTOGENERATED CLASS
	  * Do not modify the code
	  * Please use toJava.mtl inside an Acceleo Project
	  */

	public static void main(String[] args) {
		/**
		 * Init all elements
		 */
		// Init Game
		Game GameEnigme = new Game("GameEnigme");
		// Init Composants
		Place succes = new Place("Succes", PlacementType.finish);
		Place echec = new Place("Echec", PlacementType.finish);
		Place enigme = new Place("Enigme", PlacementType.start);
			
		Item tentative = new Item("Tentative", 1);
				
		Knowledge reussite = new Knowledge("Reussite", new Condition(""));
		
		Player joueur = new Player("Joueur", enigme);
		
		Exchange GainReussite = new Exchange();
		HashMap<Knowledge, Integer> gainknowledge = new HashMap<Knowledge, Integer>();
		gainknowledge.put(reussite, 1);
		GainReussite.setGainedKnowledge(gainknowledge);

		Exchange PerteTentative = new Exchange();
		HashMap<Item, Integer> consumitem = new HashMap<Item, Integer>();
		consumitem.put(tentative, 1);
		HashMap<Knowledge, Integer> nonreussite = new HashMap<Knowledge, Integer>();
		nonreussite.put(reussite, 0);
		PerteTentative.setConsumedItems(consumitem);
		PerteTentative.setGainedKnowledge(nonreussite);
		
		Action bonneReponse = new Action("BonneReponse", GainReussite);
		Action mauvaiseReponse = new Action("BonneReponse", PerteTentative);
		
		Choice BonneReponse = new Choice("Question", PlacementType.start, bonneReponse);
		BonneReponse.setDescription("BONNE REPONSE");
		Choice MauvaiseReponse = new Choice("Question", PlacementType.start, mauvaiseReponse);
		MauvaiseReponse.setDescription("MAUVAISE REPONSE");
		
		List<Choice> questions = new ArrayList<Choice>();
		questions.add(BonneReponse);
		questions.add(MauvaiseReponse);
		
		Interaction Reponses1 = new Interaction("Reponses", new Condition(""), questions);
		
		Choice BonneReponse2 = new Choice("Question", PlacementType.finish, bonneReponse);
		BonneReponse.setDescription("BONNE REPONSE");
		Choice MauvaiseReponse2 = new Choice("Question", PlacementType.finish, mauvaiseReponse);
		MauvaiseReponse.setDescription("MAUVAISE REPONSE");
		
		List<Choice> questions2 = new ArrayList<Choice>();
		questions2.add(BonneReponse2);
		questions2.add(MauvaiseReponse2);
		
		Interaction Reponses2 = new Interaction("Reponses", new Condition(""), questions2);
		
		List<Interaction> Reponses = new ArrayList<Interaction>();
		Reponses.add(Reponses1);
		Reponses.add(Reponses2);
		
		Png sphinx = new Png("Sphinx", enigme, Reponses);
		
		Condition CondVisibleSucces = new Condition("ConditionToSucces");
		HashMap<Knowledge, Integer> condknows = new HashMap<Knowledge, Integer>();
		condknows.put(reussite,1);
		CondVisibleSucces.setRequiredKnowledges(condknows);
		
		Arc Enigme2Succes = new Arc("ToSucces", Visibility.invisible, CondVisibleSucces, enigme, succes, new Exchange());
		
		Condition CondVisibleEchec = new Condition("ConditionToSucces");
		HashMap<Item, Integer> conditem = new HashMap<Item, Integer>();
		conditem.put(tentative,0); /////Problème : comment dire que tentative = 0
		CondVisibleEchec.setRequiredItems(conditem);
		
		Arc Enigme2Echec = new Arc("ToEchec", Visibility.invisible, CondVisibleEchec, enigme, echec, new Exchange());

		// Init Dependencies
		// Init Items		
		
		//Set ..
		tentative.setVisibility(Visibility.visible);
		joueur.setInventorySize(3);
		joueur.addItem(tentative, 3);
		
		sphinx.setVisibility(Visibility.visible);
		
		List<Arc> enigme_arc_out = new ArrayList<Arc>();
		enigme_arc_out.add(Enigme2Succes);
		enigme_arc_out.add(Enigme2Echec);
		enigme.setArcsOut(enigme_arc_out);
		
		List<Arc> succes_arc_in = new ArrayList<Arc>();
		succes_arc_in.add(Enigme2Succes);
		succes.setArcsIn(succes_arc_in);
		
		List<Arc> echec_arc_in = new ArrayList<Arc>();
		echec_arc_in.add(Enigme2Echec);
		echec.setArcsIn(echec_arc_in);
		
		List<Png> png = new ArrayList<Png>();
		png.add(sphinx);
		enigme.setPng(png);
		
		GameEnigme.setPlayer(joueur);
		GameEnigme.setStartPlace(enigme);
		
		List<Place> places = new ArrayList<Place>();
		places.add(enigme);
		places.add(succes);
		places.add(echec);
		GameEnigme.setPlaces(places);
		
		/**
		 * Launch the game
		 */
		Controleur controleur = new Controleur(new Afficheur(), GameEnigme);
		controleur.jouer();
	}

}
